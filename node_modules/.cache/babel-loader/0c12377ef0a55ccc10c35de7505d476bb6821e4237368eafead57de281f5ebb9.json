{"ast":null,"code":"import Lock_ABI from \"./Lock_ABI.json\";\nimport { BrowserProvider, Contract, parseEther, formatEther } from \"ethers\";\nimport { CONTRACT_ADDRESS } from \"./constants\";\n\n// Module-level variables to store provider, signer, and contract\nlet provider;\nlet signer;\nlet contract;\n\n// Function to initialize the provider, signer, and contract\nconst initialize = async () => {\n  if (typeof window.ethereum !== \"undefined\") {\n    provider = new BrowserProvider(window.ethereum);\n    signer = await provider.getSigner();\n    contract = new Contract(CONTRACT_ADDRESS, Lock_ABI, signer);\n  } else {\n    console.error(\"Please install MetaMask!\");\n  }\n};\n\n// Initialize once when the module is loaded\ninitialize();\n\n// Function to request single account\nexport const requestAccount = async () => {\n  try {\n    const accounts = await provider.send(\"eth_requestAccounts\", []);\n    return accounts[0]; // Return the first account\n  } catch (error) {\n    console.error(\"Error requesting account:\", error.message);\n    return null;\n  }\n};\n// Function to get contract balance in ETH\nexport const getContractBalanceInETH = async () => {\n  const balanceWei = await provider.getBalance(CONTRACT_ADDRESS);\n  const balanceEth = formatEther(balanceWei); // Convert Wei to ETH string\n  return balanceEth; // Convert ETH string to number\n};\n\n// Function to deposit funds to the contract\nexport const depositFund = async depositValue => {\n  const ethValue = parseEther(depositValue);\n  const deposit = await contract.deposit({\n    value: ethValue\n  });\n  await deposit.wait();\n};\n\n// Function to withdraw funds from the contract\nexport const withdrawFund = async () => {\n  const withdrawTx = await contract.withdraw();\n  await withdrawTx.wait();\n  console.log(\"Withdrawal successful!\");\n};","map":{"version":3,"names":["Lock_ABI","BrowserProvider","Contract","parseEther","formatEther","CONTRACT_ADDRESS","provider","signer","contract","initialize","window","ethereum","getSigner","console","error","requestAccount","accounts","send","message","getContractBalanceInETH","balanceWei","getBalance","balanceEth","depositFund","depositValue","ethValue","deposit","value","wait","withdrawFund","withdrawTx","withdraw","log"],"sources":["/Users/rudrabhaskar/Desktop/DAPP_Etherks/dapp-demo-main/client/src/utils/contractServices.js"],"sourcesContent":["import Lock_ABI from \"./Lock_ABI.json\";\nimport { BrowserProvider, Contract, parseEther, formatEther } from \"ethers\";\nimport { CONTRACT_ADDRESS } from \"./constants\";\n\n// Module-level variables to store provider, signer, and contract\nlet provider;\nlet signer;\nlet contract;\n\n// Function to initialize the provider, signer, and contract\nconst initialize = async () => {\n  if (typeof window.ethereum !== \"undefined\") {\n    provider = new BrowserProvider(window.ethereum);\n    signer = await provider.getSigner();\n    contract = new Contract(CONTRACT_ADDRESS, Lock_ABI, signer);\n  } else {\n    console.error(\"Please install MetaMask!\");\n  }\n};\n\n// Initialize once when the module is loaded\ninitialize();\n\n// Function to request single account\nexport const requestAccount = async () => {\n  try {\n    const accounts = await provider.send(\"eth_requestAccounts\", []);\n    return accounts[0]; // Return the first account\n  } catch (error) {\n    console.error(\"Error requesting account:\", error.message);\n    return null;\n  }\n};\n// Function to get contract balance in ETH\nexport const getContractBalanceInETH = async () => {\n  const balanceWei = await provider.getBalance(CONTRACT_ADDRESS);\n  const balanceEth = formatEther(balanceWei); // Convert Wei to ETH string\n  return balanceEth; // Convert ETH string to number\n};\n\n// Function to deposit funds to the contract\nexport const depositFund = async (depositValue) => {\n  const ethValue = parseEther(depositValue);\n  const deposit = await contract.deposit({ value: ethValue });\n  await deposit.wait();\n};\n\n// Function to withdraw funds from the contract\nexport const withdrawFund = async () => {\n  const withdrawTx = await contract.withdraw();\n  await withdrawTx.wait();\n  console.log(\"Withdrawal successful!\");\n};\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,iBAAiB;AACtC,SAASC,eAAe,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,WAAW,QAAQ,QAAQ;AAC3E,SAASC,gBAAgB,QAAQ,aAAa;;AAE9C;AACA,IAAIC,QAAQ;AACZ,IAAIC,MAAM;AACV,IAAIC,QAAQ;;AAEZ;AACA,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,IAAI,OAAOC,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;IAC1CL,QAAQ,GAAG,IAAIL,eAAe,CAACS,MAAM,CAACC,QAAQ,CAAC;IAC/CJ,MAAM,GAAG,MAAMD,QAAQ,CAACM,SAAS,CAAC,CAAC;IACnCJ,QAAQ,GAAG,IAAIN,QAAQ,CAACG,gBAAgB,EAAEL,QAAQ,EAAEO,MAAM,CAAC;EAC7D,CAAC,MAAM;IACLM,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;EAC3C;AACF,CAAC;;AAED;AACAL,UAAU,CAAC,CAAC;;AAEZ;AACA,OAAO,MAAMM,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;IAC/D,OAAOD,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACtB,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAACI,OAAO,CAAC;IACzD,OAAO,IAAI;EACb;AACF,CAAC;AACD;AACA,OAAO,MAAMC,uBAAuB,GAAG,MAAAA,CAAA,KAAY;EACjD,MAAMC,UAAU,GAAG,MAAMd,QAAQ,CAACe,UAAU,CAAChB,gBAAgB,CAAC;EAC9D,MAAMiB,UAAU,GAAGlB,WAAW,CAACgB,UAAU,CAAC,CAAC,CAAC;EAC5C,OAAOE,UAAU,CAAC,CAAC;AACrB,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG,MAAOC,YAAY,IAAK;EACjD,MAAMC,QAAQ,GAAGtB,UAAU,CAACqB,YAAY,CAAC;EACzC,MAAME,OAAO,GAAG,MAAMlB,QAAQ,CAACkB,OAAO,CAAC;IAAEC,KAAK,EAAEF;EAAS,CAAC,CAAC;EAC3D,MAAMC,OAAO,CAACE,IAAI,CAAC,CAAC;AACtB,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMC,UAAU,GAAG,MAAMtB,QAAQ,CAACuB,QAAQ,CAAC,CAAC;EAC5C,MAAMD,UAAU,CAACF,IAAI,CAAC,CAAC;EACvBf,OAAO,CAACmB,GAAG,CAAC,wBAAwB,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}